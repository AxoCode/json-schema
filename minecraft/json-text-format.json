{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$comment": "Still incomplete",
  "title": "Minecraft Text Format",
  "description": "Minecraft Raw JSON Text Format",
  "type": ["string", "object", "array", "boolean", "integer"],
  "definitions": {
    "string": {
      "type": "string",
      "default": ""
    },
    "boolean": {
      "type": ["boolean", "string"],
      "default": false,
      "pattern": "^(true|false)$"
    }
  },
  "additionalProperties": false,
  "additionalItems": false,
  "items": {
    "$ref": "#/properties"
  },
  "anyOf": [
    { "required": ["text"] },
    { "required": ["translate"] },
    { "required": ["score"] },
    { "required": ["selector"] },
    { "required": ["keybind"] },
    { "required": ["nbt"] }
  ],
  "properties": {
    "$schema": {
      "description": "Allow $schema because additionalProperties is false",
      "$ref": "#/definitions/string"
    },
    "extra": {
      "description": "A list of additional raw JSON text components to be displayed after this one.\nIgnored if translate is not present.",
      "type": "array",
      "additionalItems": false,
      "items": {
        "$ref": "#"
      }
    },
    "text": {
      "description": "A string containing plain text to display directly.\nCan also be a number or boolean that is displayed directly.",
      "type": ["string", "integer", "boolean"],
      "default": ""
    },
    "translate": {
      "description": "A translation identifier, corresponding to the identifiers found in loaded language files.\nDisplayed as the corresponding text in the player's selected language. If no corresponding translation can be found, the identifier itself is used as the translated text.",
      "$ref": "#/definitions/string"
    },
    "with": {
      "description": "A list of raw JSON text components to be inserted into slots in the translation text.",
      "type": "array",
      "additionalItems": false,
      "$ref": "#"
    },
    "color": {
      "description": "The color to render the content in. Valid values are\n\"black\", \"dark_blue\", \"dark_green\", \"dark_aqua\", \"dark_red\", \"dark_purple\", \"gold\", \"gray\", \"dark_gray\", \"blue\", \"green\", \"aqua\", \"red\", \"light_purple\", \"yellow\", \"white\", and \"reset\"\nSet to #<hex> to insert any color in the hexadecimal color format. Example: Using \"#FF0000\" makes the component red.\nMust be a full 6-digit value, not 3-digit.",
      "$ref": "#/definitions/string",
      "pattern": "^(black|(dark_)?blue|(dark_)?green|(dark_)?aqua|(dark_)?red|(dark_|light_)purple|gold|(dark_)?gray|yellow|white|reset|#[0-9A-Fa-f]{6})$"
    },
    "font": {
      "description": "The resource location of the font for this component in the resource pack within assets/namespace/font\nDefault is minecraft:default",
      "type": "string",
      "default": "minecraft:default"
    },
    "bold": {
      "description": "Whether to render the content in bold.",
      "$ref": "#/definitions/boolean"
    },
    "italic": {
      "description": "Whether to render the content in italics.\nNote that text that is italicized by default, such as custom item names, can be unitalicized by setting this to false.",
      "$ref": "#/definitions/boolean"
    },
    "underlined": {
      "description": "Whether to underline the content.",
      "$ref": "#/definitions/boolean"
    },
    "strikethrough": {
      "description": "Whether to strikethrough the content.",
      "$ref": "#/definitions/boolean"
    },
    "obfuscated": {
      "description": "Whether to render the content obfuscated.",
      "$ref": "#/definitions/boolean"
    },
    "insertion": {
      "description": "When the text is shift-clicked by a player, this string is inserted in their chat input.\nIt does not overwrite any existing text the player was writing.\nThis only works in chat messages.",
      "$ref": "#/definitions/string"
    },
    "clickEvent": {
      "description": "Allows for events to occur when the player clicks on text.\nOnly work in chat messages and written books, unless specified otherwise.",
      "type": "object",
      "additionalProperties": false,
      "required": ["action", "value"],
      "properties": {
        "action": {
          "description": "The action to perform when clicked. Valid values are\n\"open_url\": Opens value as a URL in the user's default web browser.\n\"run_command\": Works in signs, but only on the root text component, not on any children. Activated by using the sign. In chat and written books, this has value entered in chat as though the player typed it themselves and pressed enter. This can be used to run commands, provided the player has the required permissions. Since they are being run from chat, commands must be prefixed with the usual \"/\" slash. In signs, the command is run by the server at the sign's location, with the player who used the sign as @s. Since they are run by the server, sign commands have the same permission level as a command block instead of using the player's permission level, are not restricted by chat length limits, and do not need to be prefixed with a \"/\" slash.\n\"suggest_command\": Opens chat and fills in value. If a chat message was already being composed, it is overwritten. This does not work in books.\n\"change_page\": Can only be used in written books. Changes to page value if that page exists.\n\"copy_to_clipboard\": Copies value to the clipboard.",
          "$ref": "#/definitions/string",
          "enum": [
            "open_url",
            "open_file",
            "run_command",
            "suggest_command",
            "change_page",
            "copy_to_clipboard"
          ]
        },
        "value": {
          "description": "The URL, file path, chat, command or book page used by the specified action.",
          "$ref": "#/definitions/string"
        }
      }
    },
    "hoverEvent": {
      "description": "Allows for a tooltip to be displayed when the player hovers their mouse over text.",
      "type": "object",
      "additionalProperties": false,
      "required": ["acion", "value"],
      "properties": {
        "action": {
          "description": "The type of tooltip to show. Valid values are\n\"show_text\": Shows a raw JSON text component.\n\"show_item\": Shows the tooltip of an item as if it was being hovering over it in an inventory.\n\"show_entity\": Shows an entity's name, type, and UUID. Used by selector.",
          "$ref": "#/definitions/string",
          "enum": ["show_text", "show_item", "show_entity"]
        },
        "contents": {
          "description": "The formatting of this tag varies depending on the action.",
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "action": {
                    "const": "show_text"
                  }
                }
              },
              "then": {
                "description": "Another raw JSON text component. Can be any valid text component type: string, array, or object.\nNote that clickEvent and hoverEvent do not function within the tooltip.",
                "$ref": "#"
              }
            },
            {
              "if": {
                "properties": {
                  "action": {
                    "const": "show_item"
                  }
                }
              },
              "then": {
                "description": "The item that should be displayed.",
                "type": "object",
                "additionalProperties": false,
                "required": ["id"],
                "properties": {
                  "id": {
                    "description": "The namespaced item ID. Present minecraft:air if invalid.",
                    "$ref": "#/definitions/string"
                  },
                  "count": {
                    "description": "Size of the item stack",
                    "type": "integer",
                    "default": 1
                  },
                  "tag": {
                    "description": "A string containing the serialized NBT of the additional information about the item, discussed more in the subsections of the player format page.",
                    "$ref": "#/definitions/string"
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "action": {
                    "const": "show_entity"
                  }
                }
              },
              "then": {
                "description": "The entity that should be displayed.",
                "type": "object",
                "additionalProperties": false,
                "required": ["type", "id"],
                "properties": {
                  "name": {
                    "description": "Hidden if not present. A raw JSON text that is displayed as the name of the entity.",
                    "$ref": "#"
                  },
                  "type": {
                    "description": "A string containing the type of the entity. Should be a namespaced entity ID. Present minecraft:pig if invalid.",
                    "$ref": "#/definitions/string"
                  },
                  "id": {
                    "description": "A string containing the UUID of the entity in the hyphenated hexadecimal format. Should be a valid UUID.",
                    "$ref": "#/definitions/string",
                    "pattern": "[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}"
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
